// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // A register
    Mux16(a=instruction,b=ALUout,sel=instruction[15],out=Mux1out);  //  if inM[15] is 0,		
    And(a=instruction[5],b=instruction[15],out=And1out);            //  out =instruction, else, 	
    Not(in=And1out,out=NotAnd1out);				    //  out=ALU output
    Or(a=And1out,b=NotAnd1out,out=AlwaysOne);
    Mux(a=AlwaysOne,b=And1out,sel=instruction[15],out=AregisterLoad);
    ARegister(in=Mux1out,load=AregisterLoad,out=Aoutput,out[0..14]=Aout15bit,out[0..14]=addressM);
    
    // Deciding between A instruction and M instruction.
    Mux16(a=Aoutput,b=inM,sel=instruction[12],out=Mux2out);

    // Dregister.
    And(a=instruction[15],b=instruction[4],out=DregisterLoad);
    DRegister(in=ALUout,load=DregisterLoad,out=Doutput);
    
    // ALU
    ALU(x=Doutput,y=Mux2out,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout,zr=zr,ng=ng,out=outM);
    
    // PC
    // Calculating load of PC
    Or(a=zr,b=ng,out=zrORng);
    Not(in=zrORng,out=X);
    And(a=instruction[0],b=instruction[15],out=o0);
    And(a=instruction[1],b=instruction[15],out=o1);
    And(a=instruction[2],b=instruction[15],out=o2);
    And(a=o0,b=X,out=PCload1);
    And(a=o1,b=zr,out=PCload2);
    And(a=o2,b=ng,out=PCload3);
    Or(a=PCload1,b=PCload2,out=PCload1or2);
    Or(a=PCload1or2,b=PCload3,out=PCload);
    Not(in=PCload,out=PCloadnot);
    Or(a=PCload,b=PCloadnot,out=always1);    
    PC(in=Aoutput,load=PCload,inc=always1,reset=reset,out[0..14]=pc); 
    
    // WriteM 
    And(a=instruction[3],b=instruction[15],out=writeM);
    




}