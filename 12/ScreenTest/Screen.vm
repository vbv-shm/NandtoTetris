function Screen.init 0
push constant 0
return
function Screen.clearScreen 0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 5
push constant 16384
push constant 32
push argument 1
call Math.multiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push local 0
call Memory.peek 1
pop local 1
push argument 0
push constant 16
call Screen.remainder 2
pop local 2
push constant 15
push local 2
sub
pop local 2
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
pop local 4
goto IF_END0
label IF_FALSE0
push constant 0
pop local 4
label IF_END0
push constant 1
pop local 3
label WHILE_EXP0
push local 2
push constant 0
gt
not
if-goto WHILE_END0
push local 3
push local 3
add
pop local 3
push local 2
push constant 1
sub
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 4
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push local 1
push local 3
or
call Memory.poke 2
pop temp 0
goto IF_END1
label IF_FALSE1
push local 0
push local 1
push local 3
not
and
call Memory.poke 2
pop temp 0
label IF_END1
push constant 0
return
function Screen.drawLine 0
push constant 0
return
function Screen.drawRectangle 0
push constant 0
return
function Screen.drawCircle 0
push constant 0
return
function Screen.power 1
push argument 0
pop local 0
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
return
goto IF_END0
label IF_FALSE0
label WHILE_EXP0
push argument 1
push constant 1
gt
not
if-goto WHILE_END0
push local 0
push argument 0
call Math.multiply 2
pop local 0
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
label IF_END0
function Screen.remainder 0
label WHILE_EXP0
push argument 1
push argument 0
lt
not
if-goto WHILE_END0
push argument 0
push argument 1
sub
pop argument 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
return
