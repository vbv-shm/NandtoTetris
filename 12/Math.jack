// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	   static Array B;
    	static int W;
	static Array totwothe;

    /** Initializes the library. */
    function void init() {
	var int i,val;

        let W=16;

        let B=Array.new(W);
        let val=1;
        let i=0;
        while(i<W){
            let B[i]=val;
            let val=val+val;
            let i=i+1;
        }

	let i=0;
	let totwothe= Array.new(16);
	while(i<16){
		let totwothe[i]=0; 
		let i=i+1;
	}
	return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
	if (x<0){return -x;}
	else {return x;}
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
	var int i,sum,shiftedx;
	let i=0;
	let shiftedx=Math.abs(x);
	let sum=0;

	do Math.settwotothe(Math.abs(y));

	while (i<16){
	if (Math.bit(i)){
		let sum=sum+shiftedx;		
	}
	let shiftedx=shiftedx+shiftedx;
	let i=i+1;	
}
	
	let i=0;
	while(i<16){
		let totwothe[i]=0; 
		let i=i+1;
	}
	if((x<0 & y>0)|(x>0 & y<0)){return -sum;}
	else {return sum;}

	
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
	var int a;
	let a=Math.dividee(x,y);
	if((x<0 & y>0) | (x>0 & y<0)){return -a;}
	else{return a;}
    }

    function int dividee(int x, int y) {
	var int q;
	let x=Math.abs(x);
	let y=Math.abs(y);
	
	if (y>x){return 0;}
	let q=Math.dividee(x,2*y);
	if((x-(2*q*y))<y){return 2*q;}
	else{return (2*q)+1;}
    }


    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i,y,temp,temp2;

        let i=(W/2)-1;
        let y=0;
        while(i>-1){
            let temp=y+B[i];
            let temp2=temp*temp;
            if(((temp2<x)|(temp2=x))&(temp2>0)){
                let y=temp;
            }
            let i=i-1;
        }

        return y;
    }

    function int power(int number, int p){
	var int value;
	let value = number;
	if (p = 0){return 1;}
	else{
	while(p>1){
	let value = value*number;
	let p=p-1;}	
	return value;}
}

    /** Returns the greater number. */
    function int max(int a, int b) {
	if(a>b){return a;}
	else{return b;}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
	if(a<b){return a;}
	else{return b;}
    }
    /** Returns true if the i-th bit of x is 1,false otherwise */
    function boolean bit(int i){
	if (totwothe[i]>0){return true;}
	else {return false;}
}
    /** Set the value of twotothe Array  */
    function void settwotothe(int x){
	var int i,j;
	let i=0;
	let j=1;
	while(i<16){
	let totwothe[i]=x & j;
	let i=i+1;
	let j=j+j;// in binary adding a number by itself is equivalent to multipling by 10 
}	
	return;

}
}





