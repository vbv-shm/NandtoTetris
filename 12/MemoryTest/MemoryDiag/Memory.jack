// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array ram;
	static Array heap;
	static int freelist;

    /** Initializes the class. */
    function void init() {
	let ram =0;
	let heap=2048;
	let heap[0]=0;     //next
	let heap[1]=14335;    //length
	let freelist= 2048;
	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
	return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
	let ram[address]=value;
	return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
	var int war,x;
	var int maddress, varr,y;
	let war=freelist;
	let y=0;
	while(true){
		if(heap[war+1]>size+2 & y=0){
			let heap[freelist+size+2]=heap[freelist];		
			let freelist=size+2+freelist;
			let heap[freelist+1]=heap[war+1]-size-2;
			let heap[war+1]=size;
			let heap[war]=0; 
			return war+2;}

		if(heap[war+1]>size+2 & y=1){
			let heap[varr+size+2]=heap[varr];	
			let varr=size+2+varr;
			let heap[varr+1]=heap[war+1]-size-2;
			let heap[war+1]=size;
			let heap[war]=0; 
			return war+2;}

		let y=1;
		let war =heap[war];
		let varr=heap[war];
		if (heap[war]=0){do Sys.error(6);}
		}
	return 8000;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
	var int war,x;
	var int maddress, varr,y;
	let war=freelist;
	
	while(true){
		if (heap[war]=0){
			let heap[war]=o-2;
			return;
			}
		let war =heap[war];
    		}    
	do Sys.error(6);
	return;
			    }
}