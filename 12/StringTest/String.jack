// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array str;
	field int length,maxL;
	field Array asciiValues;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
	
	if(maxLength=0){let maxLength=maxLength+1;}
	let str = Array.new(maxLength);
	let length=0;
	let maxL=maxLength;

	let asciiValues=Array.new(10);
	let asciiValues[0]=48;
	let asciiValues[1]=49;
	let asciiValues[2]=50;
	let asciiValues[3]=51;
	let asciiValues[4]=52;
	let asciiValues[5]=53;
	let asciiValues[6]=54;
	let asciiValues[7]=55;
	let asciiValues[8]=56;
	let asciiValues[9]=57;
	return this;
    }

    /** Disposes this string. */
    method void dispose() {
	do Memory.deAlloc(this);
	return;
    }

    /** Returns the current length of this string. */
    method int length() {
	return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
	return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
	let str[j]=c;
	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
	if (length <maxL){
	let str[length]=c;
	let length =length+1;}
	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
	let str[length-1]=0;
	let length =length-1;
	return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
	var int rem,i,d,val,l;
	let i=0;
	let val=0;
	let l=length;
	while(i< l){
		let d=asciiToInt(str[i]);
		if(d>47 & d<58){
		let val=val*10+d;}
		else{ if (i=0){let length=length;}
		else{return val;}
			}
		let i=i+1;
			}
	if(str[0]=45){let val=-val;}
	return val;
	
    }
     method int asciiToInt(int ascii){
	
	var int i;
	let i=0;
	let ascii=Math.abs(ascii);
	while(i<10){
		if(asciiValues[i]=ascii){
			return i;
				}
		let i=i+1;
		}
	return 0;
}


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
	var int lastDigit;
	var char c;
	
	let length=0;
	
	if(val<0 ){do appendChar(45);}

	let val=Math.abs(val);
	let lastDigit=String.remainder(val,10);
	let c=getAscii(lastDigit);

	if(val<10){
	do appendChar(c);
	return;}
	else{	do setInt(val/10);
		do appendChar(c);
		return;
}
    }

    method int getAscii(int num){

	var int i;

	let i=0;
	while(i<10 ){
		if(num>-1 & num<10 ){
		if(asciiValues[i]=asciiValues[num] ){
			return asciiValues[i];
				}}
		let i=i+1;
		}
	return 0;
}

    /** Returns the new line character. */
    function char newLine() {
	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
	return 34;
    }

    function int power(int number, int p){
	var int value;
	let value = number;
	if (p = 0){return 1;}
	else{
	while(p>1){
	let value = value*number;
	let p=p-1;}	
	return value;}
}
   function int remainder(int x, int y){
	while(y<x){
		let x=x-y;
}
	return x;
}

}
