class Bullet {
    field int speed;
    field int x;
    constructor Bullet new(int Aspeed) {
        let x = 0;
        let speed = Aspeed;
        return this;
    }

    method void draw_bullet() {
        do Screen.drawCircle((x+104),120,7);
        return;
    }

    method void move() {
        /* the bullet moves along a line */
        do Screen.setColor(true);
        do draw_bullet();
        if (x < (400 - 32 - speed)) {
            do Screen.setColor(false);
            do draw_bullet();
            let x = x + speed;
            do Screen.setColor(true);
            do draw_bullet();
        }
        return;
    }
    
    method void disappear() {
        /* erase the bullet, and dispose it*/
        do Screen.setColor(false);
        do draw_bullet();
        do dispose();
        return;
    }

    method void blast(int location) {
        /* when bullet hits the target, it will blast */
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 8192);
        do Memory.poke(memAddress+32, 30734);
        do Memory.poke(memAddress+64, 15388);
        do Memory.poke(memAddress+96, 2108);
        do Memory.poke(memAddress+128, 56);
        do Memory.poke(memAddress+160, 16384);
        do Memory.poke(memAddress+192, 10294);
        do Memory.poke(memAddress+224, 31806);
        do Memory.poke(memAddress+256, 10294);
        do Memory.poke(memAddress+288, 16384);
        do Memory.poke(memAddress+320, 8);
        do Memory.poke(memAddress+352, 10268);
        do Memory.poke(memAddress+384, 31948);
        do Memory.poke(memAddress+416, 14542);
        do Memory.poke(memAddress+448, 24710);
        do Memory.poke(memAddress+480, 0);
        do Sys.wait(1000);
        do Screen.setColor(false);
        do Screen.drawRectangle(465,118, 483,135);
        return;
    }


    method boolean hit() {
        /* determine whether the bullet hits the target */
        if (x > (400 - 32 - speed)) {
            return true;
        }
        if (x = (400 - 32 - speed)) {
            return true;
        }
        return false;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}

class Gun {
    field int x, y;
    field Bullet bullet;
    field int speed;
    constructor Gun new(int Ax, int Ay, int Aspeed) {
        let x = Ax;
        let y = Ay;
        let speed = Aspeed;
        let bullet = Bullet.new(speed);
        do draw_gun();
        return this;
    }

    method void draw_gun() {
        do Screen.setColor(true);
        do Screen.drawRectangle(8,112,79,128);
        do Screen.drawRectangle(16,104,23,111);
        do Screen.drawRectangle(11,128,31,159);
        do Screen.drawRectangle(72,104,79,111);
        do Screen.drawRectangle(36,128,39,135);
        do Screen.drawRectangle(44,128,47,143);
        do Screen.drawRectangle(32,140,43,143);
        do dispose();
        return;
    }

    method void fire_start(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 254);
        do Memory.poke(memAddress+32, 508);
        do Memory.poke(memAddress+64, 1016);
        do Memory.poke(memAddress+96, 2032);
        do Memory.poke(memAddress+128, 4064);
        do Memory.poke(memAddress+160, 8128);
        do Memory.poke(memAddress+192, 16256);
        do Memory.poke(memAddress+224, 32512);
        do Memory.poke(memAddress+256, 32256);
        do Memory.poke(memAddress+288, 31744);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        let location = location - (2 * (16 * 32));
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 32256);
        do Memory.poke(memAddress+192, 16128);
        do Memory.poke(memAddress+224, 8064);
        do Memory.poke(memAddress+256, 4032);
        do Memory.poke(memAddress+288, 2016);
        do Memory.poke(memAddress+320, 1008);
        do Memory.poke(memAddress+352, 504);
        do Memory.poke(memAddress+384, 252);
        do Memory.poke(memAddress+416, 126);
        do Memory.poke(memAddress+448, 63);
        do Memory.poke(memAddress+480, 0);
        do Sys.wait(50);
        do Screen.setColor(false);
        do Screen.drawRectangle(80, 96, 95, 143);
    	return;
    }

    method void fire() {
        do bullet.move();
        return;
    }

    method void blast(int address) {
        do bullet.blast(address);
        return;
    }

    method boolean hit() {
        return bullet.hit();
    }

    method void disappear() {
        do bullet.disappear();
        do dispose();
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}

class Target {
    field int y;
    field int return_value;
    field int current_score;
    field int chance;
    field in speed;

    constructor Target new(int Aspeed) {
        /* the speed will determine the speed of the bullet*/
        let speed = Aspeed;
        let return_value = 0;
        let chance = 3;
        let y = 0;
        return this;
    }

    method void draw_target(boolean setter) {
        do Screen.setColor(setter);
        do Screen.drawRectangle(504, y, 511, y + 95);
        do Screen.drawRectangle(496, (y + 16), 503, (y + 16 + 63));
        do Screen.drawRectangle(488, (y + 32), 495, (y + 32 + 31));
        do Screen.drawRectangle(484, (y + 40), 487, (y + 40 +15));
        do Screen.setColor(false);
        do Screen.drawRectangle(491, (y + 35), 493, (y + 60));
        return;
    }
 
    method void move(Gun gun) {
        /* control the target to move up and down*/
        var boolean set;
        var boolean flag;
        var boolean moving_down;
        var boolean fired;
        var int key;
        let flag = true;
        let moving_down = true;
        let fired = false;
        while (flag) {
            let key = Keyboard.keyPressed();
            if (key = 32 & ~(fired)) {
                let fired = true;
                do gun.fire_start(4101);
            }
            if (fired) {
                do gun.fire();
            }
            if (gun.hit() & chance > 0) {
                let current_score = calc_score();
                let chance = chance - 1;
                let return_value = return_value + current_score;
                do gun.disappear();
                do gun.blast(3805);
                do show_score();
                do Sys.wait(1000);
                let gun = Gun.new(0,0,speed);
                let fired = false;
            }
            if (chance = 0) {
                return;
            }
            if (y < 159 & (moving_down)) {
                do move_down();
                let y = y + 1;
            }
            if (y = 159) {
                let moving_down = false;
            }
            if (y > 0 & ~(moving_down)) {
                do move_up();
                let y = y - 1;
            }
            if (y = 0) {
                let moving_down = true;
            }
        }
        return;
    }

    method int abs(int a, int b) {
        if (a > b) {
            return (a-b);
        }
        return (b-a);
    }

    method int calc_score() {
        var int center;
        var int diff;
        let center = y + 48;
        let diff = abs(120, center);
        if (diff < 10) {
            return 100;
        }
        if (diff < 20) {
            return 80;
        }
        if (diff < 30) {
            return 60;
        }
        if (diff < 40) {
            return 40;
        }
        if (diff < 50) {
            return 20;
        }
        return 0;
    }

    method void move_down() {
        /* sometimes the sys won't have enough time to refresh the whole target
        so it's better to render lines, instead of the whole thing*/
        do Screen.setColor(true);
        do Screen.drawLine(504, 95 + y + 1, 511, 95 + y + 1);
        do Screen.drawLine(496, y + 16 + 63 + 1, 503, y + 16 + 63 + 1);
        do Screen.drawLine(488, y + 32 + 31 + 1, 495, y + 32 + 31 + 1);
        do Screen.drawLine(484, y + 40 + 15 + 1, 487, y + 40 + 15 + 1);
        do Screen.drawLine(491, (y + 35), 493, (y + 35)); 
        do Screen.setColor(false);
        do Screen.drawLine(504, y, 511, y);
        do Screen.drawLine(496, y+16, 503, y+16);
        do Screen.drawLine(488, y+32, 495, y+32);
        do Screen.drawLine(484, y+40, 487, y+40);
        do Screen.drawLine(491, (y + 60 + 1), 493, (y + 60 + 1));
        do Sys.wait(10);
        return;
    }

    method void move_up() {
        do Screen.setColor(true);
        do Screen.drawLine(504, y-1, 511, y-1);
        do Screen.drawLine(496, y+16-1, 503, y+16-1);
        do Screen.drawLine(488, y+32-1, 495, y+32-1);
        do Screen.drawLine(484, y+40-1, 487, y+40-1);
        do Screen.drawLine(491, y+60-1, 493, y+60-1);
        do Screen.setColor(false);
        do Screen.drawLine(504, 95 + y, 511, 95 + y);
        do Screen.drawLine(496, y + 16 + 63, 503, y + 16 + 63);
        do Screen.drawLine(488, y + 32 + 31, 495, y + 32 + 31);
        do Screen.drawLine(484, y + 40 + 15, 487, y + 40 + 15);
        do Screen.drawLine(491, (y + 35 - 1), 493, (y + 35 - 1));
        do Sys.wait(10);
        return;
    }

    method void show_score() {
        do Output.moveCursor(3,20);
        do Output.printString("YOUR CURRENT SCORE IS:");
        do Output.moveCursor(3,45);
        do Output.printString("   "); //prevent 100
        do Output.moveCursor(3,45);
        do Output.printInt(current_score);
        do Output.moveCursor(5,20);
        do Output.printString("YOUR BULLETS LEFT:");
        do Output.moveCursor(5,40);
        do Output.printInt(chance);
        do Output.moveCursor(7, 20);
        do Output.printString("YOUR TOTAL SCORE IS:");
        do Output.moveCursor(7, 40);
        do Output.printInt(return_value);
        return;
    }

    method void show_final() {
       do Output.moveCursor(7, 20);
        do Output.printString("YOUR TOTAL SCORE IS:");
        do Output.moveCursor(7, 40);
        do Output.printInt(return_value); 
        return;
    }

    method void dispose() {
        do gun.disappear();
        do Memory.deAlloc(this);
        return;
    }
}

class Main {
    function void main() {
        var Gun gun;
        var Target target;
        var boolean flag;
        var int speed;
        var boolean game_on;
        var int restart;
        let game_on = true;
        while (game_on) {
            let flag = true;
            while (flag) {
                do Output.moveCursor(1, 17);
                do Output.printString("Welcome to SHOOTING GAME");
                do Output.moveCursor(3, 10);
                do Output.printString("Choose a level: 1: easy, 2:medium, 3:hard");
                do Output.moveCursor(7, 30);
                let speed = Keyboard.readInt("");
                if ((speed = 1) | (speed = 2) | (speed = 3)) {
                    let flag = false;
                } //the higher the speed is, the easier the game will be
                /* if the player didn't give a valid number, program will ask again*/
            }
            do Output.moveCursor(7,20);
            do Output.printString("Press Spacebar to Shoot");
            do Sys.wait(1500);
            do Screen.clearScreen();
            let speed = 6 / speed;
            let target = Target.new(speed);
            do target.show_score();
            let gun = Gun.new(0,0,(speed));
            do target.draw_target(true);
            do target.move(gun);
            do Screen.clearScreen();
            do target.show_final();
            do Sys.wait(1000);
           
            do Output.moveCursor(10, 20);
            do Output.printString("AGAIN? 1: yes, 2: no");
            do Output.moveCursor(13, 30);
            let restart =  Keyboard.readInt("");
            if (~(restart=1)) {
                /* if player decide to play again */
                do Output.moveCursor(10, 30);
                do Screen.clearScreen();
                do Output.printString("BYE");
                do Sys.wait(2000);
                do Screen.clearScreen();
                do Sys.wait(2000);
                return;
            }
            do Screen.clearScreen();
        }
        return;
    }
}

